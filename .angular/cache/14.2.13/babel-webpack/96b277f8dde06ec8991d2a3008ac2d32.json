{"ast":null,"code":"import _classCallCheck from \"/Users/prakhyamylavaram/Desktop/SJSU/CMPE-202/Project_Theater/Movie-Theater-booking/ui-components/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/prakhyamylavaram/Desktop/SJSU/CMPE-202/Project_Theater/Movie-Theater-booking/ui-components/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i3 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ZIndexUtils } from 'primeng/utils';\n\nfunction OverlayPanel_div_0_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction OverlayPanel_div_0_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function OverlayPanel_div_0_button_4_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      var ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.onCloseClick($event));\n    })(\"keydown.enter\", function OverlayPanel_div_0_button_4_Template_button_keydown_enter_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      var ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.hide());\n    });\n    i0.ɵɵelement(1, \"span\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"aria-label\", ctx_r2.ariaCloseLabel);\n  }\n}\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1\n  };\n};\n\nvar _c1 = function _c1(a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nfunction OverlayPanel_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function OverlayPanel_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onOverlayClick($event));\n    })(\"@animation.start\", function OverlayPanel_div_0_Template_div_animation_animation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onAnimationStart($event));\n    })(\"@animation.done\", function OverlayPanel_div_0_Template_div_animation_animation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onAnimationEnd($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function OverlayPanel_div_0_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onContentClick());\n    })(\"mousedown\", function OverlayPanel_div_0_Template_div_mousedown_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      var ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onContentClick());\n    });\n    i0.ɵɵprojection(2);\n    i0.ɵɵtemplate(3, OverlayPanel_div_0_ng_container_3_Template, 1, 0, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, OverlayPanel_div_0_button_4_Template, 2, 1, \"button\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.styleClass);\n    i0.ɵɵproperty(\"ngClass\", \"p-overlaypanel p-component\")(\"ngStyle\", ctx_r0.style)(\"@animation\", i0.ɵɵpureFunction2(10, _c1, ctx_r0.overlayVisible ? \"open\" : \"close\", i0.ɵɵpureFunction2(7, _c0, ctx_r0.showTransitionOptions, ctx_r0.hideTransitionOptions)));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.contentTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showCloseIcon);\n  }\n}\n\nvar _c2 = [\"*\"];\nvar OverlayPanel = /*#__PURE__*/(function () {\n  var OverlayPanel = /*#__PURE__*/function () {\n    function OverlayPanel(el, renderer, cd, zone, config, overlayService) {\n      _classCallCheck(this, OverlayPanel);\n\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.zone = zone;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.dismissable = true;\n      this.appendTo = 'body';\n      this.autoZIndex = true;\n      this.baseZIndex = 0;\n      this.focusOnShow = true;\n      this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n      this.hideTransitionOptions = '.1s linear';\n      this.onShow = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.overlayVisible = false;\n      this.render = false;\n      this.isOverlayAnimationInProgress = false;\n      this.selfClick = false;\n    }\n\n    _createClass(OverlayPanel, [{\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        var _this = this;\n\n        this.templates.forEach(function (item) {\n          switch (item.getType()) {\n            case 'content':\n              _this.contentTemplate = item.template;\n              break;\n\n            default:\n              _this.contentTemplate = item.template;\n              break;\n          }\n\n          _this.cd.markForCheck();\n        });\n      }\n    }, {\n      key: \"bindDocumentClickListener\",\n      value: function bindDocumentClickListener() {\n        var _this2 = this;\n\n        if (!this.documentClickListener && this.dismissable) {\n          this.zone.runOutsideAngular(function () {\n            var documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n            var documentTarget = _this2.el ? _this2.el.nativeElement.ownerDocument : 'document';\n            _this2.documentClickListener = _this2.renderer.listen(documentTarget, documentEvent, function (event) {\n              if (!_this2.container.contains(event.target) && _this2.target !== event.target && !_this2.target.contains(event.target) && !_this2.selfClick) {\n                _this2.zone.run(function () {\n                  _this2.hide();\n                });\n              }\n\n              _this2.selfClick = false;\n\n              _this2.cd.markForCheck();\n            });\n          });\n        }\n      }\n    }, {\n      key: \"unbindDocumentClickListener\",\n      value: function unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n          this.documentClickListener();\n          this.documentClickListener = null;\n          this.selfClick = false;\n        }\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle(event, target) {\n        var _this3 = this;\n\n        if (this.isOverlayAnimationInProgress) {\n          return;\n        }\n\n        if (this.overlayVisible) {\n          if (this.hasTargetChanged(event, target)) {\n            this.destroyCallback = function () {\n              _this3.show(null, target || event.currentTarget || event.target);\n            };\n          }\n\n          this.hide();\n        } else {\n          this.show(event, target);\n        }\n      }\n    }, {\n      key: \"show\",\n      value: function show(event, target) {\n        if (this.isOverlayAnimationInProgress) {\n          return;\n        }\n\n        this.target = target || event.currentTarget || event.target;\n        this.overlayVisible = true;\n        this.render = true;\n        this.cd.markForCheck();\n      }\n    }, {\n      key: \"onOverlayClick\",\n      value: function onOverlayClick(event) {\n        this.overlayService.add({\n          originalEvent: event,\n          target: this.el.nativeElement\n        });\n        this.selfClick = true;\n      }\n    }, {\n      key: \"onContentClick\",\n      value: function onContentClick() {\n        this.selfClick = true;\n      }\n    }, {\n      key: \"hasTargetChanged\",\n      value: function hasTargetChanged(event, target) {\n        return this.target != null && this.target !== (target || event.currentTarget || event.target);\n      }\n    }, {\n      key: \"appendContainer\",\n      value: function appendContainer() {\n        if (this.appendTo) {\n          if (this.appendTo === 'body') document.body.appendChild(this.container);else DomHandler.appendChild(this.container, this.appendTo);\n        }\n      }\n    }, {\n      key: \"restoreAppend\",\n      value: function restoreAppend() {\n        if (this.container && this.appendTo) {\n          this.el.nativeElement.appendChild(this.container);\n        }\n      }\n    }, {\n      key: \"align\",\n      value: function align() {\n        if (this.autoZIndex) {\n          ZIndexUtils.set('overlay', this.container, this.baseZIndex + this.config.zIndex.overlay);\n        }\n\n        DomHandler.absolutePosition(this.container, this.target);\n        var containerOffset = DomHandler.getOffset(this.container);\n        var targetOffset = DomHandler.getOffset(this.target);\n        var arrowLeft = 0;\n\n        if (containerOffset.left < targetOffset.left) {\n          arrowLeft = targetOffset.left - containerOffset.left;\n        }\n\n        this.container.style.setProperty('--overlayArrowLeft', \"\".concat(arrowLeft, \"px\"));\n\n        if (containerOffset.top < targetOffset.top) {\n          DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n\n          if (this.showCloseIcon) {\n            this.container.style.marginTop = '30px';\n          }\n        }\n      }\n    }, {\n      key: \"onAnimationStart\",\n      value: function onAnimationStart(event) {\n        var _this4 = this;\n\n        if (event.toState === 'open') {\n          this.container = event.element;\n          this.onShow.emit(null);\n          this.appendContainer();\n          this.align();\n          this.bindDocumentClickListener();\n          this.bindDocumentResizeListener();\n          this.bindScrollListener();\n\n          if (this.focusOnShow) {\n            this.focus();\n          }\n\n          this.overlayEventListener = function (e) {\n            if (_this4.container && _this4.container.contains(e.target)) {\n              _this4.selfClick = true;\n            }\n          };\n\n          this.overlaySubscription = this.overlayService.clickObservable.subscribe(this.overlayEventListener);\n        }\n\n        this.isOverlayAnimationInProgress = true;\n      }\n    }, {\n      key: \"onAnimationEnd\",\n      value: function onAnimationEnd(event) {\n        switch (event.toState) {\n          case 'void':\n            if (this.destroyCallback) {\n              this.destroyCallback();\n              this.destroyCallback = null;\n            }\n\n            if (this.overlaySubscription) {\n              this.overlaySubscription.unsubscribe();\n            }\n\n            break;\n\n          case 'close':\n            if (this.autoZIndex) {\n              ZIndexUtils.clear(this.container);\n            }\n\n            if (this.overlaySubscription) {\n              this.overlaySubscription.unsubscribe();\n            }\n\n            this.onContainerDestroy();\n            this.onHide.emit({});\n            this.render = false;\n            break;\n        }\n\n        this.isOverlayAnimationInProgress = false;\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var focusable = DomHandler.findSingle(this.container, '[autofocus]');\n\n        if (focusable) {\n          this.zone.runOutsideAngular(function () {\n            setTimeout(function () {\n              return focusable.focus();\n            }, 5);\n          });\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        if (this.isOverlayAnimationInProgress) {\n          return;\n        }\n\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n      }\n    }, {\n      key: \"onCloseClick\",\n      value: function onCloseClick(event) {\n        this.hide();\n        event.preventDefault();\n      }\n    }, {\n      key: \"onWindowResize\",\n      value: function onWindowResize(event) {\n        if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n          this.hide();\n        }\n      }\n    }, {\n      key: \"bindDocumentResizeListener\",\n      value: function bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n      }\n    }, {\n      key: \"unbindDocumentResizeListener\",\n      value: function unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n          window.removeEventListener('resize', this.documentResizeListener);\n          this.documentResizeListener = null;\n        }\n      }\n    }, {\n      key: \"bindScrollListener\",\n      value: function bindScrollListener() {\n        var _this5 = this;\n\n        if (!this.scrollHandler) {\n          this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, function () {\n            if (_this5.overlayVisible) {\n              _this5.hide();\n            }\n          });\n        }\n\n        this.scrollHandler.bindScrollListener();\n      }\n    }, {\n      key: \"unbindScrollListener\",\n      value: function unbindScrollListener() {\n        if (this.scrollHandler) {\n          this.scrollHandler.unbindScrollListener();\n        }\n      }\n    }, {\n      key: \"onContainerDestroy\",\n      value: function onContainerDestroy() {\n        if (!this.cd.destroyed) {\n          this.target = null;\n        }\n\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.scrollHandler) {\n          this.scrollHandler.destroy();\n          this.scrollHandler = null;\n        }\n\n        if (this.container && this.autoZIndex) {\n          ZIndexUtils.clear(this.container);\n        }\n\n        if (!this.cd.destroyed) {\n          this.target = null;\n        }\n\n        this.destroyCallback = null;\n\n        if (this.container) {\n          this.restoreAppend();\n          this.onContainerDestroy();\n        }\n\n        if (this.overlaySubscription) {\n          this.overlaySubscription.unsubscribe();\n        }\n      }\n    }]);\n\n    return OverlayPanel;\n  }();\n\n  OverlayPanel.ɵfac = function OverlayPanel_Factory(t) {\n    return new (t || OverlayPanel)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i1.OverlayService));\n  };\n\n  OverlayPanel.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: OverlayPanel,\n    selectors: [[\"p-overlayPanel\"]],\n    contentQueries: function OverlayPanel_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      dismissable: \"dismissable\",\n      showCloseIcon: \"showCloseIcon\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      appendTo: \"appendTo\",\n      autoZIndex: \"autoZIndex\",\n      ariaCloseLabel: \"ariaCloseLabel\",\n      baseZIndex: \"baseZIndex\",\n      focusOnShow: \"focusOnShow\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\"\n    },\n    outputs: {\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    ngContentSelectors: _c2,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"class\", \"click\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\", \"click\"], [1, \"p-overlaypanel-content\", 3, \"click\", \"mousedown\"], [4, \"ngTemplateOutlet\"], [\"type\", \"button\", \"class\", \"p-overlaypanel-close p-link\", \"pRipple\", \"\", 3, \"click\", \"keydown.enter\", 4, \"ngIf\"], [\"type\", \"button\", \"pRipple\", \"\", 1, \"p-overlaypanel-close\", \"p-link\", 3, \"click\", \"keydown.enter\"], [1, \"p-overlaypanel-close-icon\", \"pi\", \"pi-times\"]],\n    template: function OverlayPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, OverlayPanel_div_0_Template, 5, 13, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.render);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle, i3.Ripple],\n    styles: [\".p-overlaypanel{position:absolute;margin-top:10px;top:0;left:0}.p-overlaypanel-flipped{margin-top:0;margin-bottom:10px}.p-overlaypanel-close{display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.p-overlaypanel:after,.p-overlaypanel:before{bottom:100%;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.p-overlaypanel:after{border-width:8px;margin-left:-8px}.p-overlaypanel:before{border-width:10px;margin-left:-10px}.p-overlaypanel-shifted:after,.p-overlaypanel-shifted:before{left:auto;right:1.25em;margin-left:auto}.p-overlaypanel-flipped:after,.p-overlaypanel-flipped:before{bottom:auto;top:100%}.p-overlaypanel.p-overlaypanel-flipped:after{border-bottom-color:transparent}.p-overlaypanel.p-overlaypanel-flipped:before{border-bottom-color:transparent}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animation', [state('void', style({\n        transform: 'scaleY(0.8)',\n        opacity: 0\n      })), state('close', style({\n        opacity: 0\n      })), state('open', style({\n        transform: 'translateY(0)',\n        opacity: 1\n      })), transition('void => open', animate('{{showTransitionParams}}')), transition('open => close', animate('{{hideTransitionParams}}'))])]\n    },\n    changeDetection: 0\n  });\n  return OverlayPanel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar OverlayPanelModule = /*#__PURE__*/(function () {\n  var OverlayPanelModule = /*#__PURE__*/_createClass(function OverlayPanelModule() {\n    _classCallCheck(this, OverlayPanelModule);\n  });\n\n  OverlayPanelModule.ɵfac = function OverlayPanelModule_Factory(t) {\n    return new (t || OverlayPanelModule)();\n  };\n\n  OverlayPanelModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OverlayPanelModule\n  });\n  OverlayPanelModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, RippleModule, SharedModule, SharedModule]\n  });\n  return OverlayPanelModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { OverlayPanel, OverlayPanelModule }; //# sourceMappingURL=primeng-overlaypanel.mjs.map","map":null,"metadata":{},"sourceType":"module"}